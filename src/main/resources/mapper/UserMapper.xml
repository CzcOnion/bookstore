<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.csu.bookstore.persistence.UserMapper" >
  <resultMap id="BaseResultMap" type="org.csu.bookstore.domain.User" >
    <id column="user_id" property="userId" jdbcType="DECIMAL" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="gender" property="gender" jdbcType="DECIMAL" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="zip" property="zip" jdbcType="CHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    user_id, name, password, email, address, gender, phone, zip
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from users
    where user_id = #{userId,jdbcType=DECIMAL}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from users
    where user_id = #{userId,jdbcType=DECIMAL}
  </delete>
  <insert id="insert" parameterType="org.csu.bookstore.domain.User" >
    insert into users (user_id, name, password,
      email, address, gender, 
      phone, zip)
    values (#{userId,jdbcType=DECIMAL}, #{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{gender,jdbcType=DECIMAL}, 
      #{phone,jdbcType=VARCHAR}, #{zip,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.csu.bookstore.domain.User" >
    insert into users
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        user_id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="address != null" >
        address,
      </if>
      <if test="gender != null" >
        gender,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="zip != null" >
        zip,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=DECIMAL},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="gender != null" >
        #{gender,jdbcType=DECIMAL},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="zip != null" >
        #{zip,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.csu.bookstore.domain.User" >
    update users
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="gender != null" >
        gender = #{gender,jdbcType=DECIMAL},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="zip != null" >
        zip = #{zip,jdbcType=CHAR},
      </if>
    </set>
    where user_id = #{userId,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.csu.bookstore.domain.User" >
    update users
    set name = #{name,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=DECIMAL},
      phone = #{phone,jdbcType=VARCHAR},
      zip = #{zip,jdbcType=CHAR}
    where user_id = #{userId,jdbcType=DECIMAL}
  </update>

  <select id="getNextId" resultType="int">
    select
    max(user_id)+1
    from
    users
  </select>

</mapper>